opal_filter "Range" do
  fails "Range#bsearch with Float values with a block returning negative, zero, positive numbers accepts (+/-)Float::INFINITY from the block"
  fails "Range#bsearch with Float values with a block returning negative, zero, positive numbers returns an element at an index for which block returns 0"
  fails "Range#bsearch with Float values with a block returning negative, zero, positive numbers returns nil if the block never returns zero"
  fails "Range#bsearch with Float values with a block returning negative, zero, positive numbers returns nil if the block returns greater than zero for every element"
  fails "Range#bsearch with Float values with a block returning negative, zero, positive numbers returns nil if the block returns less than zero for every element"
  fails "Range#bsearch with Float values with a block returning true or false returns minimum element if the block returns true for every element"
  fails "Range#bsearch with Float values with a block returning true or false returns nil if the block returns false for every element"
  fails "Range#bsearch with Float values with a block returning true or false returns nil if the block returns nil for every element"
  fails "Range#bsearch with Float values with a block returning true or false returns the smallest element for which block returns true"
  fails "Range#cover? compares values using <=>"
  fails "Range#cover? uses the range element's <=> to make the comparison"
  fails "Range#each raises a TypeError if the first element does not respond to #succ"
  fails "Range#each raises a TypeError if the first element is a Time object"
  fails "Range#each when no block is given returned Enumerator size returns the enumerable size"
  fails "Range#first raises a TypeError if #to_int does not return an Integer"
  fails "Range#hash generates a Fixnum for the hash value"
  fails "Range#include? compares values using <=>"
  fails "Range#include? on string elements returns false if other is not matched by element.succ"
  fails "Range#include? with weird succ when excluded end value returns false if other is not matched by element.succ"
  fails "Range#include? with weird succ when included end value returns false if other is equal as last element but not matched by element.succ"
  fails "Range#include? with weird succ when included end value returns false if other is not matched by element.succ"
  fails "Range#last raises a TypeError if #to_int does not return an Integer"
  fails "Range#max given a block calls #> and #< on the return value of the block"
  fails "Range#max raises TypeError when called on a Time...Time(excluded end point)"
  fails "Range#max raises TypeError when called on an exclusive range and a non Integer value"
  fails "Range#max returns the maximum value in the range when called with no arguments"
  fails "Range#member? compares values using <=>"
  fails "Range#member? on string elements returns false if other is not matched by element.succ"
  fails "Range#member? with weird succ when excluded end value returns false if other is not matched by element.succ"
  fails "Range#member? with weird succ when included end value returns false if other is equal as last element but not matched by element.succ"
  fails "Range#member? with weird succ when included end value returns false if other is not matched by element.succ"
  fails "Range#min given a block calls #> and #< on the return value of the block"
  fails "Range#step calls #to_int to coerce step to an Integer"
  fails "Range#step coerces the argument to integer by invoking to_int"
  fails "Range#step raises TypeError if step"
  fails "Range#step raises a TypeError if #to_int does not return an Integer"
  fails "Range#step raises a TypeError if step does not respond to #to_int"
  fails "Range#step raises a TypeError if the first element does not respond to #succ"
  fails "Range#step returns an enumerator when no block is given"
  fails "Range#step when no block is given returned Enumerator size raises a TypeError if #to_int does not return an Integer"
  fails "Range#step when no block is given returned Enumerator size raises a TypeError if step does not respond to #to_int"
  fails "Range#step when no block is given returned Enumerator size raises an ArgumentError if step is 0"
  fails "Range#step when no block is given returned Enumerator size raises an ArgumentError if step is 0.0"
  fails "Range#step when no block is given returned Enumerator size raises an ArgumentError if step is negative"
  fails "Range#step when no block is given returned Enumerator size return nil and not raises a TypeError if the first element does not respond to #succ"
  fails "Range#step when no block is given returned Enumerator size returns nil with begin and end are String"
  fails "Range#step when no block is given returned Enumerator size returns the ceil of range size divided by the number of steps"
  fails "Range#step when no block is given returned Enumerator size returns the correct number of steps when one of the arguments is a float"
  fails "Range#step when no block is given returned Enumerator size returns the range size when there's no step_size"
  fails "Range#step with exclusive end and Float values returns Float values of 'step * n + begin < end'"
  fails "Range#step with exclusive end and String values raises a TypeError when passed a Float step"
  fails "Range#step with inclusive end and Float values returns Float values of 'step * n + begin <= end'"
  fails "Range#step with inclusive end and String values calls #succ on begin and each element returned by #succ"
  fails "Range#step with inclusive end and String values raises a TypeError when passed a Float step"
end
